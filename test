import http from 'k6/http';
import { check, sleep } from "k6";
import {
  Writer,
  Reader,
  Connection,
  SchemaRegistry,
  SCHEMA_TYPE_JSON,
  SASL_PLAINTEXT,
  SASL_SCRAM_SHA512,
} from "k6/x/kafka"; // import kafka extension

const brokers = ["192.168.1.212:9092"];
const initialTopic = "Display-line-Balance-producer-topic";
const finalTopic = "Display-line-Balance-consumer-topic";

// SASL config is optional
const saslConfig = {
  username: "admin",
  password: "admin-secret",
  algorithm: SASL_SCRAM_SHA512,
};

const offset = 0;
// partition and groupId are mutually exclusive
const partition = 0;

const writer = new Writer({
  brokers: brokers,
  topic: initialTopic,
  sasl: saslConfig,
});

const reader = new Reader({
  brokers: brokers,
  topic: initialTopic,
  partition: partition,
  offset: offset,
  sasl: saslConfig,
});

const connection = new Connection({
  address: brokers[0],
  sasl: saslConfig,
});

const schemaRegistry = new SchemaRegistry();

export const optionsInitialTopic = {
  scenarios: {
    initial_topic_scenario: {
      executor: "constant-vus",
      vus: 3,
      duration: "3s",
      gracefulStop: "1s",
    },
  },
  thresholds: {
    kafka_writer_error_count: ["count == 0"],
    kafka_reader_error_count: ["count == 0"],
  },
  tags: { topic: initialTopic },
};

export const optionsFinalTopic = {
  scenarios: {
    final_topic_scenario: {
      executor: "constant-vus",
      vus: 3,
      duration: "3s",
      gracefulStop: "1s",
    },
  },
  thresholds: {
    kafka_writer_error_count: ["count == 0"],
    kafka_reader_error_count: ["count == 0"],
  },
  tags: { topic: finalTopic },
};

export function initialTopicScenario() {
  for (let index = 0; index < 2; index++) {
    let messages = [
      {
        key: schemaRegistry.serialize({
          data: {
            correlationId: "test-id-abc-" + index,
          },
          schemaType: SCHEMA_TYPE_JSON,
        }),
        value: schemaRegistry.serialize({
          data: {
            name: "Dione send a message",
          },
          schemaType: SCHEMA_TYPE_JSON,
        }),
      },
    ];

    writer.produce({ messages: messages });
  }

  // Read 10 messages only
  let messages = reader.consume({ limit: 10 });
  check(messages, {
    "10 messages returned": (msgs) => msgs.length == 10,
    "key is correct": (msgs) =>
      schemaRegistry
        .deserialize({ data: msgs[0].key, schemaType: SCHEMA_TYPE_JSON })
        .correlationId.startsWith("test-id-"),
    "value is correct": (msgs) =>
      schemaRegistry.deserialize({
        data: msgs[0].value,
        schemaType: SCHEMA_TYPE_JSON,
      }).name == "Dione send a message",
  });
}

export function finalTopicScenario() {
  // Récupération des informations du Mocserveur
  let response = http.get("http://192.168.1.28:8080/");

  // Vérifier que le code d'état retourné est 200
  check(response, {
    "status is 200": (res) => res.status === 200
  });

  // Envoyer les données récupérées vers le topic Kafka final
  let mocData = response.body; // Supposons que les données du service Moc sont dans le corps de la réponse
  let mocMessage = {
    key: null, // Vous pouvez définir la clé si nécessaire
    value: mocData, // Utilisez les données récupérées comme valeur du message
  };
  writer.produce({ messages: [mocMessage], topic: finalTopic });

  sleep(1);
}

export function teardown(data) {
  writer.close();
  reader.close();
  connection.close();
}
